# Copyright 2020 Istio-Bench Authors and Hitachi Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import os
import yaml
import logging

from libs import utils
from libs import command


class DummyPod:
    """deploy/delete resource on k8s"""

    def __init__(self, pod_manifest, ns_manifest, prefix):
        self.label = "deployedBy=istio-bench"
        self.prefix = prefix
        self.pod_template = self.__make_template(pod_manifest)
        self.ns_template = self.__make_template(ns_manifest)

    def create_env(self, deploy_num=1, max_pod_per_ns=50):
        """
        deploy_num: int
            deploy num
        """
        # TODO run max_pod_per_ns
        # TODO set pod num declarative
        ns_postfix = utils.get_unixepoch()
        ns_manifest = self.__gen_manifest(self.ns_template, ns_postfix)
        self.deploy(manifest=ns_manifest, namespace=None)

        ns = "dummy-{postfix}".format(postfix=ns_postfix)
        print("    Create {ns} namespace".format(ns=ns))
        print(
            "    Deploy {current}/{all} pods".format(current=0, all=deploy_num), end=""
        )

        # TODO equalize pod per namespace
        for i in range(deploy_num):
            pod_postfix = utils.get_unixepoch()
            pod_manifest = self.__gen_manifest(self.pod_template, pod_postfix)
            self.deploy(manifest=pod_manifest, namespace=ns)
            sys.stdout.write(
                "\r    Deploy {current}/{all} pods".format(
                    current=(i + 1), all=deploy_num
                )
            )
            sys.stdout.flush()
        sys.stdout.write("\n")
        sys.stdout.flush()

        return ns

    def deploy(self, manifest, namespace=None):
        ns = ""
        if namespace:
            ns = " --namespace {}".format(namespace)

        cmd = "cat << EOF | kubectl{ns} apply -f -\n{manifest}EOF".format(
            ns=ns, manifest=manifest
        )
        logging.debug(cmd)
        return command.run_sync(cmd)

    def wait(self, namespace, resource, condition, timeout="300s"):
        """
        Wait for a specific condition on deployed/deleted resources
        """
        # use timeout command. because --timeout option in kubectl wait
        # does not mean process timeout.
        # --timeout is interval of sending GET resource to api-server
        cmd = "timeout {timeout} kubectl --namespace {namespace} wait {resource} \
            --for=condition={condition} --selector={label}".format(
            namespace=namespace,
            resource=resource,
            condition=condition,
            label=self.label,
            timeout=timeout,
        )
        logging.debug(cmd)
        return command.run_sync(cmd)

    def reset(self):
        """
        Delete all namespaces generated by this script
        """
        cmd = "kubectl delete namespace --selector={label}".format(label=self.label)
        logging.debug(cmd)
        return command.run_sync(cmd)

    def get_pod_num(self, namespace="default", isAllNamespaces=False):
        """
        Wait for a specific condition on deployed/deleted resources
        """
        ns = ""
        if isAllNamespaces:
            ns = "--all-namespaces"
        else:
            ns = "--namespace {}".format(namespace)

        cmd = "kubectl {ns} get pod --selector={label}".format(ns=ns, label=self.label)
        logging.debug(cmd)

        output = command.run_sync(cmd)
        return output.count(os.linesep) - 1  # remove header(-1)

    def __make_template(self, manifest):
        """
        Make template from manifest.
        template is yaml string whose name and id label are 'dummy-{postfix}'.
        So, you can set any string using format function.
        it support only for deployment and service and namespace resource now.

        manifest: string
        """
        name = self.prefix + "{postfix}"
        label = self.label.split("=")

        # manifest includes multiple resources
        # such as deployment, service, etc.
        resources = list(yaml.safe_load_all(manifest))

        for x in resources:
            # deployment, service name
            x["metadata"]["name"] = name

            # metadata
            if "labels" not in x["metadata"]:
                x["metadata"]["labels"] = {}
            x["metadata"]["labels"]["id"] = name
            # add mark label to delete resources.
            x["metadata"]["labels"][label[0]] = label[1]

            if x["kind"].lower() == "deployment":
                # deployment.spec.template.metadata.labels
                if "labels" not in x["spec"]["template"]["metadata"]:
                    x["spec"]["template"]["metadata"]["labels"] = {}
                x["spec"]["template"]["metadata"]["labels"]["id"] = name
                # add mark label to get metrics
                x["spec"]["template"]["metadata"]["labels"][label[0]] = label[1]

                # deployment.spec.selector.matchLabels
                if "matchLabels" not in x["spec"]["selector"]:
                    x["spec"]["selector"]["matchLabels"] = {}
                x["spec"]["selector"]["matchLabels"]["id"] = name

            elif x["kind"].lower() == "service":
                parent = x["spec"]
                if "selector" not in parent:
                    parent["selector"] = {}
                parent["selector"]["id"] = name

            elif x["kind"].lower() == "namespace":
                x["metadata"]["labels"]["istio-injection"] = "enabled"
        return yaml.safe_dump_all(resources, default_flow_style=False)

    def __gen_manifest(self, template, postfix):
        """
        Generate kubernetes manifest from template

        postfix: string
            postfix of deployment name and id label.
            This append on "dummy-"
        """
        return template.format(postfix=postfix)
